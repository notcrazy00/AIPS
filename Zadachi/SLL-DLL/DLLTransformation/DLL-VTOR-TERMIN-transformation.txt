Дадена е двојно поврзана листа од цели броеви. Да се трансформира листата така што ќе се меша N пати (N > 0 и се чита од стандарден влез) на следниот начин: Во секое мешање, последниот елемент се поставува во внатрешноста на листата после јазлите чија кумулативна вредност е максимална и помала или еднаква од вредноста на елементот кој се вметнува.

Во првиот ред од влезот е даден бројот на елементи на листата M, во вториот ред бројот N и во третиот ред се дадени елементите на листата.

Влез:

M = 14
N = 3
оригинална листа: 1 <-> 5 <-> 2 <-> 3 <-> 0 <-> 6 <-> 4 <-> 3 <-> 7 <-> 9 <-> 1 <-> 4 <-> 6 <-> 8
Мешање 1: 1 <-> 5 <-> 2 <-> 8 <-> 3 <-> 0 <-> 6 <-> 4 <-> 3 <-> 7 <-> 9 <-> 1 <-> 4 <-> 6 
Бројот 8 како последен елемент се вади од крајот на листата и се вметнува после елементот 2, бидејќи збирот 1+5+2 = 8 е најголем кумулативен збир од почетокот на листата, а помал и еднаков на 8

Мешање 2: 1 <-> 5 <-> 6 <-> 2 <-> 8 <-> 3 <-> 0 <-> 6 <-> 4 <-> 3 <-> 7 <-> 9 <-> 1 <-> 4 
Бројот 6 како последен елемент се вади од крајот на листата и се вметнува после елементот 5, бидејќи збирот 1+5 = 6 е најголем кумулативен збир од почетокот на листата, а помал и еднаков на 6

Мешање 3: 1  <-> 4 <-> 5 <-> 6 <-> 2 <-> 8 <-> 3 <-> 0 <-> 6 <-> 4 <-> 3 <-> 7 <-> 9 <-> 1 
Бројот 4 како последен елемент се вади од крајот на листата и се вметнува после елементот 1, бидејќи збирот 1 = 1 е најголем кумулативен збир од почетокот на листата, а помал и еднаков на 4


Излез:
1  <-> 4 <-> 5 <-> 6 <-> 2 <-> 8 <-> 3 <-> 0 <-> 6 <-> 4 <-> 3 <-> 7 <-> 9 <-> 1

=======================================================================================================================================================================================
========================================================================================================================================================================================

import java.util.Scanner;
import java.util.ArrayList;

class Element {
    private int id;
    
    public Element(int id) {
        this.id = id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String toString() {
        return String.valueOf(id);
    }
}

class DLLNode<E> {
    protected E element;
    protected DLLNode<E> pred, succ;

    public DLLNode(E elem, DLLNode<E> pred, DLLNode<E> succ) {
        this.element = elem;
        this.pred = pred;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}


class DLL<E> {
    private DLLNode<E> first, last;

    public DLL() {
        // Construct an empty SLL
        this.first = null;
        this.last = null;
    }

    public void insertFirst(E o) {
        DLLNode<E> ins = new DLLNode<E>(o, null, first);
        if (first == null)
            last = ins;
        else
            first.pred = ins;
        first = ins;
    }

    public void insertLast(E o) {
        if (first == null)
            insertFirst(o);
        else {
            DLLNode<E> ins = new DLLNode<E>(o, last, null);
            last.succ = ins;
            last = ins;
        }
    }

    public void insertAfter(E o, DLLNode<E> after) {
        if (after == last) {
            insertLast(o);
            return;
        }
        DLLNode<E> ins = new DLLNode<E>(o, after, after.succ);
        after.succ.pred = ins;
        after.succ = ins;
    }

    public void insertBefore(E o, DLLNode<E> before) {
        if (before == first) {
            insertFirst(o);
            return;
        }
        DLLNode<E> ins = new DLLNode<E>(o, before.pred, before);
        before.pred.succ = ins;
        before.pred = ins;
    }

    public E deleteFirst() {
        if (first != null) {
            DLLNode<E> tmp = first;
            first = first.succ;
            if (first != null) first.pred = null;
            if (first == null)
                last = null;
            return tmp.element;
        } else
            return null;
    }

    public E deleteLast() {
        if (first != null) {
            if (first.succ == null)
                return deleteFirst();
            else {
                DLLNode<E> tmp = last;
                last = last.pred;
                last.succ = null;
                return tmp.element;
            }
        } else
            return null;
    }

    public E delete(DLLNode<E> node) {
        if (node == first) {
            return deleteFirst();
        }
        if (node == last) {
            return deleteLast();
        }
        node.pred.succ = node.succ;
        node.succ.pred = node.pred;
        return node.element;

    }

    public DLLNode<E> find(E o) {
        if (first != null) {
            DLLNode<E> tmp = first;
            while (!tmp.element.equals(o) && tmp.succ != null)
                tmp = tmp.succ;
            if (tmp.element.equals(o)) {
                return tmp;
            } else {
                System.out.println("Elementot ne postoi vo listata");
            }
        } else {
            System.out.println("Listata e prazna");
        }
        return null;
    }

    public void deleteList() {
        first = null;
        last = null;
    }

    public int getSize() {
        int listSize = 0;
        DLLNode<E> tmp = first;
        while(tmp != null) {
            listSize++;
            tmp = tmp.succ;
        }
        return listSize;
    }

    @Override
    public String toString() {
        String ret = new String();
        if (first != null) {
            DLLNode<E> tmp = first;
            ret += tmp.toString();
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret += "<->" + tmp.toString();
            }
        } else
            ret = "Prazna lista!!!";
        return ret;
    }

    public String toStringR() {
        String ret = new String();
        if (last != null) {
            DLLNode<E> tmp = last;
            ret += tmp.toString();
            while (tmp.pred != null) {
                tmp = tmp.pred;
                ret += "<->" + tmp.toString();
            }
        } else
            ret = "Prazna lista!!!";
        return ret;
    }

    public DLLNode<E> getFirst() {
        return first;
    }

    public DLLNode<E> getLast() {

        return last;
    }
    
    public void mirror() {

        DLLNode<E> tmp = null;
        DLLNode<E> current = first;
        last = first;
        while(current!=null) {
            tmp = current.pred;
            current.pred = current.succ;
            current.succ = tmp;
            current = current.pred;
        }

        if(tmp!=null && tmp.pred!=null) {
            first=tmp.pred;
        }
    }
    
}

public class Transformation {
    
    
    private static void listTransform(DLL<Element> original, int N)
    {
        
        

      
    }
}

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = Integer.parseInt(scanner.nextLine());
        int N = Integer.parseInt(scanner.nextLine());
        
        DLL<Element> list = new DLL<Element>();
        
        for (int i = 0; i < num; i++) {
            int n = scanner.nextInt();
            list.insertLast(new Element(n));
        }

        listTransform(list, N);
    }
}

================================================================================================================================================================================
================================================================================================================================================================================

input
14
5
1 5 2 3 0 6 4 3 7 9 1 4 6 8
output
1<->1<->4<->9<->5<->6<->2<->8<->3<->0<->6<->4<->3<->7
--------------------------------------------------------------------------------------------------------------------------------------------------------------
input
20
15
157 20 658 48 956 215 23 16 18 8 0 4 100 4565 7989 65 7 154 8542 3
output
3<->7<->65<->154<->157<->20<->658<->48<->956<->215<->23<->16<->18<->8<->0<->4<->100<->4565<->8542<->7989
------------------------------------------------------------------------------------------------------------------------------------------------------------------
input
12
3
9680 12 10 2513 21 10 6549 9 7 4028 9 7
output
7<->9<->4028<->9680<->12<->10<->2513<->21<->10<->6549<->9<->7
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
input
30
21
8254 41 4 4292 50 4 3404 41 4 4718 20 5 371 16 3 7113 35 1 7352 47 9 7610 21 22 10080 2 0 2322 25 27
output
0<->1<->2<->5<->3<->9<->20<->16<->21<->35<->47<->22<->25<->27<->371<->2322<->4718<->7113<->7352<->7610<->10080<->8254<->41<->4<->4292<->50<->4<->3404<->41<->4
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
input
90
190
4858 13 4 8255 29 9 1428 18 4 4030 10 2 1600 20 10 7389 48 4 2924 41 1 275 24 4 3513 45 9 4927 47 6 8518 31 9 5244 42 7 697 3 6 8489 38 1 3829 17 7 6739 10 4 9112 20 7 6531 37 3 2829 5 9 1095 30 9 3265 43 6 10092 35 8 6837 48 2 7045 49 10 751 23 3 6820 2 4 2208 34 7 9914 9 6 3018 28 1 4220 45 1
output
1<->1<->2<->3<->10<->7<->5<->9<->38<->20<->9<->6<->2<->2<->8<->4<->10<->37<->7<->30<->6<->4<->9<->43<->275<->35<->23<->48<->49<->4<->1<->13<->1428<->5244<->3265<->2208<->1600<->1095<->751<->34<->28<->9<->1<->4<->45<->29<->18<->10<->10<->20<->4<->3<->9<->48<->41<->24<->6<->9<->7<->6<->45<->3018<->47<->31<->4<->7<->3<->42<->17<->8518<->8489<->6739<->9112<->6531<->697<->6837<->7045<->10092<->6820<->4220<->4858<->4030<->2924<->3513<->9914<->8255<->4927<->7389<->3829<->2829
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
input
36
13
5531 24 3 2695 2 7 5555 38 9 9121 7 2 9943 22 5 6252 47 9 1024 7 5 9723 41 10 9566 25 3 8201 6 7 7106 7 6 1536 17 4
output
3<->4<->10<->6<->7<->25<->7<->6<->17<->1536<->5531<->9566<->8201<->7106<->24<->3<->2695<->2<->7<->5555<->38<->9<->9121<->7<->2<->9943<->22<->5<->6252<->47<->9<->1024<->7<->5<->9723<->41
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
input
17
25
5 2855 45 8 6497 31 8 85 654 32 11 45 78 654 35 0 4
output
0<->4<->8<->5<->11<->31<->32<->85<->35<->45<->78<->654<->654<->2855<->45<->8<->6497
------------------------------------------------------------------------------------------------------------------------------------------------------------
input
21
85
7622 17 10 3607 9 9 3525 9 5 437 37 10 10050 24 5 8264 21 4 6561 36 7
output
4<->5<->17<->10<->9<->9<->9<->5<->10<->7<->37<->24<->21<->36<->437<->3525<->3607<->6561<->10050<->8264<->7622
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
input
10
3
2 4 0 8 6 10 100 24 16 46
output
2<->4<->0<->8<->24<->16<->6<->10<->46<->100
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
input
17
10
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33
output
1<->3<->5<->15<->7<->17<->19<->21<->23<->9<->25<->27<->29<->31<->33<->11<->13
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------













