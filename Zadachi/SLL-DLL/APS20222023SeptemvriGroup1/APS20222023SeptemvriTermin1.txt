Дадена е двострана поврзана листа и цел број k.
Треба листата да се изротира k пати на десно.
Влез:
Во првиот ред се внесува број на елементи во листата, па потоа самите елементи. На крај се внесува цел број k.
Излез:
Листата ротирана к пати на десно.

Код даден:

import java.util.Scanner;

class DLLNode<E> {
	protected E element;
	protected DLLNode<E> pred, succ;

	public DLLNode(E elem, DLLNode<E> pred, DLLNode<E> succ) {
		this.element = elem;
		this.pred = pred;
		this.succ = succ;
	}

	@Override
	public String toString() {
		return element.toString();
	}
}

class DLL<E> {
	private DLLNode<E> first, last;

	public DLL() {
		// Construct an empty SLL
		this.first = null;
		this.last = null;
	}

	public void insertFirst(E o) {
		DLLNode<E> ins = new DLLNode<E>(o, null, first);
		if (first == null)
			last = ins;
		else
			first.pred = ins;
		first = ins;
	}

	public void insertLast(E o) {
		if (first == null)
			insertFirst(o);
		else {
			DLLNode<E> ins = new DLLNode<E>(o, last, null);
			last.succ = ins;
			last = ins;
		}
	}

	public void insertAfter(E o, DLLNode<E> after) {
		if (after == last) {
			insertLast(o);
			return;
		}
		DLLNode<E> ins = new DLLNode<E>(o, after, after.succ);
		after.succ.pred = ins;
		after.succ = ins;
	}

	public void insertBefore(E o, DLLNode<E> before) {
		if (before == first) {
			insertFirst(o);
			return;
		}
		DLLNode<E> ins = new DLLNode<E>(o, before.pred, before);
		before.pred.succ = ins;
		before.pred = ins;
	}

	public E deleteFirst() {
		if (first != null) {
			DLLNode<E> tmp = first;
			first = first.succ;
			if (first != null)
				first.pred = null;
			if (first == null)
				last = null;
			return tmp.element;
		} else
			return null;
	}

	public E deleteLast() {
		if (first != null) {
			if (first.succ == null)
				return deleteFirst();
			else {
				DLLNode<E> tmp = last;
				last = last.pred;
				last.succ = null;
				return tmp.element;
			}
		} else
			return null;
	}

	public E delete(DLLNode<E> node) {
		if (node == first) {
			return deleteFirst();
		}
		if (node == last) {
			return deleteLast();
		}
		node.pred.succ = node.succ;
		node.succ.pred = node.pred;
		return node.element;

	}

	public DLLNode<E> find(E o) {
		if (first != null) {
			DLLNode<E> tmp = first;
			while (!tmp.element.equals(o) && tmp.succ != null)
				tmp = tmp.succ;
			if (tmp.element.equals(o)) {
				return tmp;
			} else {
				System.out.println("Elementot ne postoi vo listata");
			}
		} else {
			System.out.println("Listata e prazna");
		}
		return null;
	}

	public void deleteList() {
		first = null;
		last = null;
	}

	public int getSize() {
		int listSize = 0;
		DLLNode<E> tmp = first;
		while (tmp != null) {
			listSize++;
			tmp = tmp.succ;
		}
		return listSize;
	}

	@Override
	public String toString() {
		String ret = new String();
		if (first != null) {
			DLLNode<E> tmp = first;
			ret += tmp.toString();
			while (tmp.succ != null) {
				tmp = tmp.succ;
				ret += "<->" + tmp.toString();
			}
		} else
			ret = "Prazna lista!!!";
		return ret;
	}

	public String toStringR() {
		String ret = new String();
		if (last != null) {
			DLLNode<E> tmp = last;
			ret += tmp.toString();
			while (tmp.pred != null) {
				tmp = tmp.pred;
				ret += "<->" + tmp.toString();
			}
		} else
			ret = "Prazna lista!!!";
		return ret;
	}

	public DLLNode<E> getFirst() {
		return first;
	}

	public DLLNode<E> getLast() {

		return last;
	}

	public void mirror() {

		DLLNode<E> tmp = null;
		DLLNode<E> current = first;
		last = first;
		while (current != null) {
			tmp = current.pred;
			current.pred = current.succ;
			current.succ = tmp;
			current = current.pred;
		}

		if (tmp != null && tmp.pred != null) {
			first = tmp.pred;
		}
	}
}

public class Rotation {

	public static void Rotation_k_elements_right(DLL<Integer> list, int k) {
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);
		int numElements;
		DLL<Integer> list = new DLL<Integer>();
		numElements = scan.nextInt();
		for (int i = 0; i < numElements; i++) {
			list.insertLast(scan.nextInt());
		}

		int n = scan.nextInt();
		Rotation_k_elements_right(list, n);
		System.out.println(list);
	}

}

Test primeri:
5
1 2 3 4 5
2
4<->5<->1<->2<->3

3
0 1 2
4
2<->0<->1

4
1 3 5 7
4
1<->3<->5<->7

6
10 20 30 40 50 60
3
40<->50<->60<->10<->20<->30

5
0 2 4 6 8
6
8<->0<->2<->4<->6

10
10 20 30 40 50 60 70 80 90 100
9
20<->30<->40<->50<->60<->70<->80<->90<->100<->10

2
3 7
4
3<->7

6
1 2 3 1 2 3
3
1<->2<->3<->1<->2<->3

9
3 6 9 12 15 18 21 24 27
4
18<->21<->24<->27<->3<->6<->9<->12<->15

4
0 0 0 0
3
0<->0<->0<->0
